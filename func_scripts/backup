#!/bin/bash

# perform incremental backup
func_usage()
{
  echo " Usage: $0 -u user -d domain"
  exit 1
}
while getopts u:d: OPT
	do
		case $OPT in
		"u" ) _USER="$OPTARG" ;;
		"d" ) _DOMA="$OPTARG" ;;
		* ) func_usage ;;
		esac
	done
if [ -z ${_USER} ] || [ -z ${_DOMA} ]; then
    func_usage
fi

sql_dir="/home/${_USER}/${_DOMA}/sqlbackup"
if [ ! -d "${sql_dir}" ] && [ -d "/home/${_USER}/${_DOMA}" ]; then
	mkdir -p ${sql_dir}
	chown -R ${_USER}:${_USER} ${sql_dir}
	chmod 0777 ${sql_dir}
fi

source /usr/src/check_alive_token
srv_hostname=`hostname`
dob=`date +%Y-%m-%d`
bk_Passw0rd=`cat /usr/src/.bk_user_dwp`
pwrd=`cat /usr/src/.lifesafty_cPanel | head -c 24`
db_log="/var/log/${_DOMA}/db_backup_error_daily.log"
echo -n '' > $db_log

backup() {

	## backup db
	db=`mysql -ubk_user -p$bk_Passw0rd -e "select db_name from kusanagi.provision where user_name = '${_USER}' and provision_name = '${_DOMA}' and deactive_flg=0" | tail -n +2`
	[ ! -z $db ] && mysqldump --single-transaction -ubk_user -p$bk_Passw0rd --databases $db 2> $db_log | gzip > ${sql_dir}/$db".sql.gz"
	if [ -s $db_log ]; then
		mysqldump --single-transaction -p$pwrd --databases $db | gzip > ${sql_dir}/$db".sql.gz"
	fi

	## backup source code
	ignore_log="/var/log/${_DOMA}/ignore_bk.log"
	echo -n '' > $ignore_log
	find /home/${_USER}/${_DOMA}/ -type f \( -name "*.tar.gz" -o -name "*.zip" \) >> $ignore_log
	src_dir="/home/${_USER}/${_DOMA}"
	dest_url="file:///backup/$srv_hostname/${_USER}/${_DOMA}"
	log_archive="/var/log/${_DOMA}/archive_bk.log"
	last_log="/var/log/${_DOMA}/last_bk.log"
	error_log="/var/log/${_DOMA}/error_bk.log"
	duplicity --full-if-older-than=10D --no-encryption --allow-source-mismatch --exclude-filelist $ignore_log $src_dir $dest_url > $last_log
	RETVAL=$?

	## backup db to gfs and swift
	[ ! -z $db ] && cp ${sql_dir}/$db".sql.gz" /backup/$srv_hostname/${_USER}/${_DOMA} 2>&1 >/dev/null
	alive=$(check_alive_token)
	[ $alive -eq 0 ] && /usr/src/get_token
	[ ! -z $db ] && /usr/src/obj-upload-file -c sqlbackup/$srv_hostname/${_USER}/${_DOMA}/$dob -f ${sql_dir}/$db".sql.gz"

	error=`grep Error $last_log | awk '{print $2}'`
	if [ $RETVAL -eq 0 ] && [ $error -eq 0 ]; then
    	echo 0
		echo $dob >> $log_archive
		cat $last_log >> $log_archive
	else
		echo $dob"---Error:" >> $error_log
    	cat $last_log >> $error_log
		duplicity cleanup $dest_url --force >> $error_log
    	echo "Something error ! Please check $error_log"
		echo 1
	fi
}

backup
